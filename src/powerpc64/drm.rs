/* automatically generated by rust-bindgen 0.66.1 */

pub type __s8 = crate::ctypes::c_schar;
pub type __u8 = crate::ctypes::c_uchar;
pub type __s16 = crate::ctypes::c_short;
pub type __u16 = crate::ctypes::c_ushort;
pub type __s32 = crate::ctypes::c_int;
pub type __u32 = crate::ctypes::c_uint;
pub type __s64 = crate::ctypes::c_long;
pub type __u64 = crate::ctypes::c_ulong;
pub type __kernel_key_t = crate::ctypes::c_int;
pub type __kernel_mqd_t = crate::ctypes::c_int;
pub type __kernel_old_dev_t = crate::ctypes::c_ulong;
pub type __kernel_long_t = crate::ctypes::c_long;
pub type __kernel_ulong_t = crate::ctypes::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = crate::ctypes::c_uint;
pub type __kernel_pid_t = crate::ctypes::c_int;
pub type __kernel_ipc_pid_t = crate::ctypes::c_int;
pub type __kernel_uid_t = crate::ctypes::c_uint;
pub type __kernel_gid_t = crate::ctypes::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = crate::ctypes::c_int;
pub type __kernel_uid32_t = crate::ctypes::c_uint;
pub type __kernel_gid32_t = crate::ctypes::c_uint;
pub type __kernel_old_uid_t = __kernel_uid_t;
pub type __kernel_old_gid_t = __kernel_gid_t;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = crate::ctypes::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = crate::ctypes::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = crate::ctypes::c_int;
pub type __kernel_clockid_t = crate::ctypes::c_int;
pub type __kernel_caddr_t = *mut crate::ctypes::c_char;
pub type __kernel_uid16_t = crate::ctypes::c_ushort;
pub type __kernel_gid16_t = crate::ctypes::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = crate::ctypes::c_uint;
pub type drm_handle_t = crate::ctypes::c_uint;
pub type drm_context_t = crate::ctypes::c_uint;
pub type drm_drawable_t = crate::ctypes::c_uint;
pub type drm_magic_t = crate::ctypes::c_uint;
pub type drm_clip_rect_t = drm_clip_rect;
pub type drm_drawable_info_t = drm_drawable_info;
pub type drm_tex_region_t = drm_tex_region;
pub type drm_hw_lock_t = drm_hw_lock;
pub type drm_version_t = drm_version;
pub type drm_unique_t = drm_unique;
pub type drm_list_t = drm_list;
pub type drm_block_t = drm_block;
pub type drm_control_t = drm_control;
pub type drm_ctx_priv_map_t = drm_ctx_priv_map;
pub type drm_map_t = drm_map;
pub type drm_client_t = drm_client;
pub type drm_stats_t = drm_stats;
pub type drm_lock_t = drm_lock;
pub type drm_buf_desc_t = drm_buf_desc;
pub type drm_buf_info_t = drm_buf_info;
pub type drm_buf_free_t = drm_buf_free;
pub type drm_buf_pub_t = drm_buf_pub;
pub type drm_buf_map_t = drm_buf_map;
pub type drm_dma_t = drm_dma;
pub type drm_wait_vblank_t = drm_wait_vblank;
pub type drm_agp_mode_t = drm_agp_mode;
pub type drm_ctx_t = drm_ctx;
pub type drm_ctx_res_t = drm_ctx_res;
pub type drm_draw_t = drm_draw;
pub type drm_update_draw_t = drm_update_draw;
pub type drm_auth_t = drm_auth;
pub type drm_irq_busid_t = drm_irq_busid;
pub type drm_agp_buffer_t = drm_agp_buffer;
pub type drm_agp_binding_t = drm_agp_binding;
pub type drm_agp_info_t = drm_agp_info;
pub type drm_scatter_gather_t = drm_scatter_gather;
pub type drm_set_version_t = drm_set_version;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __vector128 {
pub u: [__u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_clip_rect {
pub x1: crate::ctypes::c_ushort,
pub y1: crate::ctypes::c_ushort,
pub x2: crate::ctypes::c_ushort,
pub y2: crate::ctypes::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_drawable_info {
pub num_rects: crate::ctypes::c_uint,
pub rects: *mut drm_clip_rect,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tex_region {
pub next: crate::ctypes::c_uchar,
pub prev: crate::ctypes::c_uchar,
pub in_use: crate::ctypes::c_uchar,
pub padding: crate::ctypes::c_uchar,
pub age: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_hw_lock {
pub lock: crate::ctypes::c_uint,
pub padding: [crate::ctypes::c_char; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_version {
pub version_major: crate::ctypes::c_int,
pub version_minor: crate::ctypes::c_int,
pub version_patchlevel: crate::ctypes::c_int,
pub name_len: __kernel_size_t,
pub name: *mut crate::ctypes::c_char,
pub date_len: __kernel_size_t,
pub date: *mut crate::ctypes::c_char,
pub desc_len: __kernel_size_t,
pub desc: *mut crate::ctypes::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_unique {
pub unique_len: __kernel_size_t,
pub unique: *mut crate::ctypes::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_list {
pub count: crate::ctypes::c_int,
pub version: *mut drm_version,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_block {
pub unused: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_control {
pub func: drm_control__bindgen_ty_1,
pub irq: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx_priv_map {
pub ctx_id: crate::ctypes::c_uint,
pub handle: *mut crate::ctypes::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_map {
pub offset: crate::ctypes::c_ulong,
pub size: crate::ctypes::c_ulong,
pub type_: drm_map_type,
pub flags: drm_map_flags,
pub handle: *mut crate::ctypes::c_void,
pub mtrr: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_client {
pub idx: crate::ctypes::c_int,
pub auth: crate::ctypes::c_int,
pub pid: crate::ctypes::c_ulong,
pub uid: crate::ctypes::c_ulong,
pub magic: crate::ctypes::c_ulong,
pub iocs: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_stats {
pub count: crate::ctypes::c_ulong,
pub data: [drm_stats__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_stats__bindgen_ty_1 {
pub value: crate::ctypes::c_ulong,
pub type_: drm_stat_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_lock {
pub context: crate::ctypes::c_int,
pub flags: drm_lock_flags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_desc {
pub count: crate::ctypes::c_int,
pub size: crate::ctypes::c_int,
pub low_mark: crate::ctypes::c_int,
pub high_mark: crate::ctypes::c_int,
pub flags: drm_buf_desc__bindgen_ty_1,
pub agp_start: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_info {
pub count: crate::ctypes::c_int,
pub list: *mut drm_buf_desc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_free {
pub count: crate::ctypes::c_int,
pub list: *mut crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_pub {
pub idx: crate::ctypes::c_int,
pub total: crate::ctypes::c_int,
pub used: crate::ctypes::c_int,
pub address: *mut crate::ctypes::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_map {
pub count: crate::ctypes::c_int,
pub virtual_: *mut crate::ctypes::c_void,
pub list: *mut drm_buf_pub,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_dma {
pub context: crate::ctypes::c_int,
pub send_count: crate::ctypes::c_int,
pub send_indices: *mut crate::ctypes::c_int,
pub send_sizes: *mut crate::ctypes::c_int,
pub flags: drm_dma_flags,
pub request_count: crate::ctypes::c_int,
pub request_size: crate::ctypes::c_int,
pub request_indices: *mut crate::ctypes::c_int,
pub request_sizes: *mut crate::ctypes::c_int,
pub granted_count: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx {
pub handle: drm_context_t,
pub flags: drm_ctx_flags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx_res {
pub count: crate::ctypes::c_int,
pub contexts: *mut drm_ctx,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_draw {
pub handle: drm_drawable_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_update_draw {
pub handle: drm_drawable_t,
pub type_: crate::ctypes::c_uint,
pub num: crate::ctypes::c_uint,
pub data: crate::ctypes::c_ulonglong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_auth {
pub magic: drm_magic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_irq_busid {
pub irq: crate::ctypes::c_int,
pub busnum: crate::ctypes::c_int,
pub devnum: crate::ctypes::c_int,
pub funcnum: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_wait_vblank_request {
pub type_: drm_vblank_seq_type,
pub sequence: crate::ctypes::c_uint,
pub signal: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_wait_vblank_reply {
pub type_: drm_vblank_seq_type,
pub sequence: crate::ctypes::c_uint,
pub tval_sec: crate::ctypes::c_long,
pub tval_usec: crate::ctypes::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_modeset_ctl {
pub crtc: __u32,
pub cmd: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_mode {
pub mode: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_buffer {
pub size: crate::ctypes::c_ulong,
pub handle: crate::ctypes::c_ulong,
pub type_: crate::ctypes::c_ulong,
pub physical: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_binding {
pub handle: crate::ctypes::c_ulong,
pub offset: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_info {
pub agp_version_major: crate::ctypes::c_int,
pub agp_version_minor: crate::ctypes::c_int,
pub mode: crate::ctypes::c_ulong,
pub aperture_base: crate::ctypes::c_ulong,
pub aperture_size: crate::ctypes::c_ulong,
pub memory_allowed: crate::ctypes::c_ulong,
pub memory_used: crate::ctypes::c_ulong,
pub id_vendor: crate::ctypes::c_ushort,
pub id_device: crate::ctypes::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_scatter_gather {
pub size: crate::ctypes::c_ulong,
pub handle: crate::ctypes::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_set_version {
pub drm_di_major: crate::ctypes::c_int,
pub drm_di_minor: crate::ctypes::c_int,
pub drm_dd_major: crate::ctypes::c_int,
pub drm_dd_minor: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_close {
pub handle: __u32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_flink {
pub handle: __u32,
pub name: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_open {
pub name: __u32,
pub handle: __u32,
pub size: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_get_cap {
pub capability: __u64,
pub value: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_set_client_cap {
pub capability: __u64,
pub value: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_prime_handle {
pub handle: __u32,
pub flags: __u32,
pub fd: __s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_create {
pub handle: __u32,
pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_destroy {
pub handle: __u32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_handle {
pub handle: __u32,
pub flags: __u32,
pub fd: __s32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_transfer {
pub src_handle: __u32,
pub dst_handle: __u32,
pub src_point: __u64,
pub dst_point: __u64,
pub flags: __u32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_wait {
pub handles: __u64,
pub timeout_nsec: __s64,
pub count_handles: __u32,
pub flags: __u32,
pub first_signaled: __u32,
pub pad: __u32,
pub deadline_nsec: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_timeline_wait {
pub handles: __u64,
pub points: __u64,
pub timeout_nsec: __s64,
pub count_handles: __u32,
pub flags: __u32,
pub first_signaled: __u32,
pub pad: __u32,
pub deadline_nsec: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_eventfd {
pub handle: __u32,
pub flags: __u32,
pub point: __u64,
pub fd: __s32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_array {
pub handles: __u64,
pub count_handles: __u32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_timeline_array {
pub handles: __u64,
pub points: __u64,
pub count_handles: __u32,
pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_crtc_get_sequence {
pub crtc_id: __u32,
pub active: __u32,
pub sequence: __u64,
pub sequence_ns: __s64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_crtc_queue_sequence {
pub crtc_id: __u32,
pub flags: __u32,
pub sequence: __u64,
pub user_data: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_modeinfo {
pub clock: __u32,
pub hdisplay: __u16,
pub hsync_start: __u16,
pub hsync_end: __u16,
pub htotal: __u16,
pub hskew: __u16,
pub vdisplay: __u16,
pub vsync_start: __u16,
pub vsync_end: __u16,
pub vtotal: __u16,
pub vscan: __u16,
pub vrefresh: __u32,
pub flags: __u32,
pub type_: __u32,
pub name: [crate::ctypes::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_card_res {
pub fb_id_ptr: __u64,
pub crtc_id_ptr: __u64,
pub connector_id_ptr: __u64,
pub encoder_id_ptr: __u64,
pub count_fbs: __u32,
pub count_crtcs: __u32,
pub count_connectors: __u32,
pub count_encoders: __u32,
pub min_width: __u32,
pub max_width: __u32,
pub min_height: __u32,
pub max_height: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc {
pub set_connectors_ptr: __u64,
pub count_connectors: __u32,
pub crtc_id: __u32,
pub fb_id: __u32,
pub x: __u32,
pub y: __u32,
pub gamma_size: __u32,
pub mode_valid: __u32,
pub mode: drm_mode_modeinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_set_plane {
pub plane_id: __u32,
pub crtc_id: __u32,
pub fb_id: __u32,
pub flags: __u32,
pub crtc_x: __s32,
pub crtc_y: __s32,
pub crtc_w: __u32,
pub crtc_h: __u32,
pub src_x: __u32,
pub src_y: __u32,
pub src_h: __u32,
pub src_w: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_plane {
pub plane_id: __u32,
pub crtc_id: __u32,
pub fb_id: __u32,
pub possible_crtcs: __u32,
pub gamma_size: __u32,
pub count_format_types: __u32,
pub format_type_ptr: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_plane_res {
pub plane_id_ptr: __u64,
pub count_planes: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_encoder {
pub encoder_id: __u32,
pub encoder_type: __u32,
pub crtc_id: __u32,
pub possible_crtcs: __u32,
pub possible_clones: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_connector {
pub encoders_ptr: __u64,
pub modes_ptr: __u64,
pub props_ptr: __u64,
pub prop_values_ptr: __u64,
pub count_modes: __u32,
pub count_props: __u32,
pub count_encoders: __u32,
pub encoder_id: __u32,
pub connector_id: __u32,
pub connector_type: __u32,
pub connector_type_id: __u32,
pub connection: __u32,
pub mm_width: __u32,
pub mm_height: __u32,
pub subpixel: __u32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_property_enum {
pub value: __u64,
pub name: [crate::ctypes::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_property {
pub values_ptr: __u64,
pub enum_blob_ptr: __u64,
pub prop_id: __u32,
pub flags: __u32,
pub name: [crate::ctypes::c_char; 32usize],
pub count_values: __u32,
pub count_enum_blobs: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_connector_set_property {
pub value: __u64,
pub prop_id: __u32,
pub connector_id: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_obj_get_properties {
pub props_ptr: __u64,
pub prop_values_ptr: __u64,
pub count_props: __u32,
pub obj_id: __u32,
pub obj_type: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_obj_set_property {
pub value: __u64,
pub prop_id: __u32,
pub obj_id: __u32,
pub obj_type: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_blob {
pub blob_id: __u32,
pub length: __u32,
pub data: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_cmd {
pub fb_id: __u32,
pub width: __u32,
pub height: __u32,
pub pitch: __u32,
pub bpp: __u32,
pub depth: __u32,
pub handle: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_cmd2 {
pub fb_id: __u32,
pub width: __u32,
pub height: __u32,
pub pixel_format: __u32,
pub flags: __u32,
pub handles: [__u32; 4usize],
pub pitches: [__u32; 4usize],
pub offsets: [__u32; 4usize],
pub modifier: [__u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_dirty_cmd {
pub fb_id: __u32,
pub flags: __u32,
pub color: __u32,
pub num_clips: __u32,
pub clips_ptr: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_mode_cmd {
pub connector_id: __u32,
pub mode: drm_mode_modeinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_cursor {
pub flags: __u32,
pub crtc_id: __u32,
pub x: __s32,
pub y: __s32,
pub width: __u32,
pub height: __u32,
pub handle: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_cursor2 {
pub flags: __u32,
pub crtc_id: __u32,
pub x: __s32,
pub y: __s32,
pub width: __u32,
pub height: __u32,
pub handle: __u32,
pub hot_x: __s32,
pub hot_y: __s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_lut {
pub crtc_id: __u32,
pub gamma_size: __u32,
pub red: __u64,
pub green: __u64,
pub blue: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_ctm {
pub matrix: [__u64; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_ctm_3x4 {
pub matrix: [__u64; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_lut {
pub red: __u16,
pub green: __u16,
pub blue: __u16,
pub reserved: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe {
pub eotf: __u8,
pub metadata_type: __u8,
pub display_primaries: [hdr_metadata_infoframe__bindgen_ty_1; 3usize],
pub white_point: hdr_metadata_infoframe__bindgen_ty_2,
pub max_display_mastering_luminance: __u16,
pub min_display_mastering_luminance: __u16,
pub max_cll: __u16,
pub max_fall: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe__bindgen_ty_1 {
pub x: __u16,
pub y: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe__bindgen_ty_2 {
pub x: __u16,
pub y: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hdr_output_metadata {
pub metadata_type: __u32,
pub __bindgen_anon_1: hdr_output_metadata__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_page_flip {
pub crtc_id: __u32,
pub fb_id: __u32,
pub flags: __u32,
pub reserved: __u32,
pub user_data: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_page_flip_target {
pub crtc_id: __u32,
pub fb_id: __u32,
pub flags: __u32,
pub sequence: __u32,
pub user_data: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_dumb {
pub height: __u32,
pub width: __u32,
pub bpp: __u32,
pub flags: __u32,
pub handle: __u32,
pub pitch: __u32,
pub size: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_map_dumb {
pub handle: __u32,
pub pad: __u32,
pub offset: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_destroy_dumb {
pub handle: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_atomic {
pub flags: __u32,
pub count_objs: __u32,
pub objs_ptr: __u64,
pub count_props_ptr: __u64,
pub props_ptr: __u64,
pub prop_values_ptr: __u64,
pub reserved: __u64,
pub user_data: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_format_modifier_blob {
pub version: __u32,
pub flags: __u32,
pub count_formats: __u32,
pub formats_offset: __u32,
pub count_modifiers: __u32,
pub modifiers_offset: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_format_modifier {
pub formats: __u64,
pub offset: __u32,
pub pad: __u32,
pub modifier: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_blob {
pub data: __u64,
pub length: __u32,
pub blob_id: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_destroy_blob {
pub blob_id: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_lease {
pub object_ids: __u64,
pub object_count: __u32,
pub flags: __u32,
pub lessee_id: __u32,
pub fd: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_list_lessees {
pub count_lessees: __u32,
pub pad: __u32,
pub lessees_ptr: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_lease {
pub count_objects: __u32,
pub pad: __u32,
pub objects_ptr: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_revoke_lease {
pub lessee_id: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_rect {
pub x1: __s32,
pub y1: __s32,
pub x2: __s32,
pub y2: __s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_closefb {
pub fb_id: __u32,
pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event {
pub type_: __u32,
pub length: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event_vblank {
pub base: drm_event,
pub user_data: __u64,
pub tv_sec: __u32,
pub tv_usec: __u32,
pub sequence: __u32,
pub crtc_id: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event_crtc_sequence {
pub base: drm_event,
pub user_data: __u64,
pub time_ns: __s64,
pub sequence: __u64,
}
pub const _IOC_SIZEBITS: u32 = 13;
pub const _IOC_DIRBITS: u32 = 3;
pub const _IOC_NONE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const _IOC_WRITE: u32 = 4;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 8191;
pub const _IOC_DIRMASK: u32 = 7;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 29;
pub const IOC_IN: u32 = 2147483648;
pub const IOC_OUT: u32 = 1073741824;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 536805376;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const DRM_NAME: &[u8; 4] = b"drm\0";
pub const DRM_MIN_ORDER: u32 = 5;
pub const DRM_MAX_ORDER: u32 = 22;
pub const DRM_RAM_PERCENT: u32 = 10;
pub const _DRM_LOCK_HELD: u32 = 2147483648;
pub const _DRM_LOCK_CONT: u32 = 1073741824;
pub const _DRM_VBLANK_HIGH_CRTC_SHIFT: u32 = 1;
pub const _DRM_PRE_MODESET: u32 = 1;
pub const _DRM_POST_MODESET: u32 = 2;
pub const DRM_CAP_DUMB_BUFFER: u32 = 1;
pub const DRM_CAP_VBLANK_HIGH_CRTC: u32 = 2;
pub const DRM_CAP_DUMB_PREFERRED_DEPTH: u32 = 3;
pub const DRM_CAP_DUMB_PREFER_SHADOW: u32 = 4;
pub const DRM_CAP_PRIME: u32 = 5;
pub const DRM_PRIME_CAP_IMPORT: u32 = 1;
pub const DRM_PRIME_CAP_EXPORT: u32 = 2;
pub const DRM_CAP_TIMESTAMP_MONOTONIC: u32 = 6;
pub const DRM_CAP_ASYNC_PAGE_FLIP: u32 = 7;
pub const DRM_CAP_CURSOR_WIDTH: u32 = 8;
pub const DRM_CAP_CURSOR_HEIGHT: u32 = 9;
pub const DRM_CAP_ADDFB2_MODIFIERS: u32 = 16;
pub const DRM_CAP_PAGE_FLIP_TARGET: u32 = 17;
pub const DRM_CAP_CRTC_IN_VBLANK_EVENT: u32 = 18;
pub const DRM_CAP_SYNCOBJ: u32 = 19;
pub const DRM_CAP_SYNCOBJ_TIMELINE: u32 = 20;
pub const DRM_CAP_ATOMIC_ASYNC_PAGE_FLIP: u32 = 21;
pub const DRM_CLIENT_CAP_STEREO_3D: u32 = 1;
pub const DRM_CLIENT_CAP_UNIVERSAL_PLANES: u32 = 2;
pub const DRM_CLIENT_CAP_ATOMIC: u32 = 3;
pub const DRM_CLIENT_CAP_ASPECT_RATIO: u32 = 4;
pub const DRM_CLIENT_CAP_WRITEBACK_CONNECTORS: u32 = 5;
pub const DRM_CLIENT_CAP_CURSOR_PLANE_HOTSPOT: u32 = 6;
pub const DRM_SYNCOBJ_CREATE_SIGNALED: u32 = 1;
pub const DRM_SYNCOBJ_FD_TO_HANDLE_FLAGS_IMPORT_SYNC_FILE: u32 = 1;
pub const DRM_SYNCOBJ_HANDLE_TO_FD_FLAGS_EXPORT_SYNC_FILE: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT: u32 = 2;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE: u32 = 4;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_DEADLINE: u32 = 8;
pub const DRM_SYNCOBJ_QUERY_FLAGS_LAST_SUBMITTED: u32 = 1;
pub const DRM_CRTC_SEQUENCE_RELATIVE: u32 = 1;
pub const DRM_CRTC_SEQUENCE_NEXT_ON_MISS: u32 = 2;
pub const DRM_CONNECTOR_NAME_LEN: u32 = 32;
pub const DRM_DISPLAY_MODE_LEN: u32 = 32;
pub const DRM_PROP_NAME_LEN: u32 = 32;
pub const DRM_MODE_TYPE_BUILTIN: u32 = 1;
pub const DRM_MODE_TYPE_CLOCK_C: u32 = 3;
pub const DRM_MODE_TYPE_CRTC_C: u32 = 5;
pub const DRM_MODE_TYPE_PREFERRED: u32 = 8;
pub const DRM_MODE_TYPE_DEFAULT: u32 = 16;
pub const DRM_MODE_TYPE_USERDEF: u32 = 32;
pub const DRM_MODE_TYPE_DRIVER: u32 = 64;
pub const DRM_MODE_TYPE_ALL: u32 = 104;
pub const DRM_MODE_FLAG_PHSYNC: u32 = 1;
pub const DRM_MODE_FLAG_NHSYNC: u32 = 2;
pub const DRM_MODE_FLAG_PVSYNC: u32 = 4;
pub const DRM_MODE_FLAG_NVSYNC: u32 = 8;
pub const DRM_MODE_FLAG_INTERLACE: u32 = 16;
pub const DRM_MODE_FLAG_DBLSCAN: u32 = 32;
pub const DRM_MODE_FLAG_CSYNC: u32 = 64;
pub const DRM_MODE_FLAG_PCSYNC: u32 = 128;
pub const DRM_MODE_FLAG_NCSYNC: u32 = 256;
pub const DRM_MODE_FLAG_HSKEW: u32 = 512;
pub const DRM_MODE_FLAG_BCAST: u32 = 1024;
pub const DRM_MODE_FLAG_PIXMUX: u32 = 2048;
pub const DRM_MODE_FLAG_DBLCLK: u32 = 4096;
pub const DRM_MODE_FLAG_CLKDIV2: u32 = 8192;
pub const DRM_MODE_FLAG_3D_MASK: u32 = 507904;
pub const DRM_MODE_FLAG_3D_NONE: u32 = 0;
pub const DRM_MODE_FLAG_3D_FRAME_PACKING: u32 = 16384;
pub const DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE: u32 = 32768;
pub const DRM_MODE_FLAG_3D_LINE_ALTERNATIVE: u32 = 49152;
pub const DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL: u32 = 65536;
pub const DRM_MODE_FLAG_3D_L_DEPTH: u32 = 81920;
pub const DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH: u32 = 98304;
pub const DRM_MODE_FLAG_3D_TOP_AND_BOTTOM: u32 = 114688;
pub const DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF: u32 = 131072;
pub const DRM_MODE_PICTURE_ASPECT_NONE: u32 = 0;
pub const DRM_MODE_PICTURE_ASPECT_4_3: u32 = 1;
pub const DRM_MODE_PICTURE_ASPECT_16_9: u32 = 2;
pub const DRM_MODE_PICTURE_ASPECT_64_27: u32 = 3;
pub const DRM_MODE_PICTURE_ASPECT_256_135: u32 = 4;
pub const DRM_MODE_CONTENT_TYPE_NO_DATA: u32 = 0;
pub const DRM_MODE_CONTENT_TYPE_GRAPHICS: u32 = 1;
pub const DRM_MODE_CONTENT_TYPE_PHOTO: u32 = 2;
pub const DRM_MODE_CONTENT_TYPE_CINEMA: u32 = 3;
pub const DRM_MODE_CONTENT_TYPE_GAME: u32 = 4;
pub const DRM_MODE_FLAG_PIC_AR_MASK: u32 = 7864320;
pub const DRM_MODE_FLAG_PIC_AR_NONE: u32 = 0;
pub const DRM_MODE_FLAG_PIC_AR_4_3: u32 = 524288;
pub const DRM_MODE_FLAG_PIC_AR_16_9: u32 = 1048576;
pub const DRM_MODE_FLAG_PIC_AR_64_27: u32 = 1572864;
pub const DRM_MODE_FLAG_PIC_AR_256_135: u32 = 2097152;
pub const DRM_MODE_FLAG_ALL: u32 = 521215;
pub const DRM_MODE_DPMS_ON: u32 = 0;
pub const DRM_MODE_DPMS_STANDBY: u32 = 1;
pub const DRM_MODE_DPMS_SUSPEND: u32 = 2;
pub const DRM_MODE_DPMS_OFF: u32 = 3;
pub const DRM_MODE_SCALE_NONE: u32 = 0;
pub const DRM_MODE_SCALE_FULLSCREEN: u32 = 1;
pub const DRM_MODE_SCALE_CENTER: u32 = 2;
pub const DRM_MODE_SCALE_ASPECT: u32 = 3;
pub const DRM_MODE_DITHERING_OFF: u32 = 0;
pub const DRM_MODE_DITHERING_ON: u32 = 1;
pub const DRM_MODE_DITHERING_AUTO: u32 = 2;
pub const DRM_MODE_DIRTY_OFF: u32 = 0;
pub const DRM_MODE_DIRTY_ON: u32 = 1;
pub const DRM_MODE_DIRTY_ANNOTATE: u32 = 2;
pub const DRM_MODE_LINK_STATUS_GOOD: u32 = 0;
pub const DRM_MODE_LINK_STATUS_BAD: u32 = 1;
pub const DRM_MODE_ROTATE_0: u32 = 1;
pub const DRM_MODE_ROTATE_90: u32 = 2;
pub const DRM_MODE_ROTATE_180: u32 = 4;
pub const DRM_MODE_ROTATE_270: u32 = 8;
pub const DRM_MODE_ROTATE_MASK: u32 = 15;
pub const DRM_MODE_REFLECT_X: u32 = 16;
pub const DRM_MODE_REFLECT_Y: u32 = 32;
pub const DRM_MODE_REFLECT_MASK: u32 = 48;
pub const DRM_MODE_CONTENT_PROTECTION_UNDESIRED: u32 = 0;
pub const DRM_MODE_CONTENT_PROTECTION_DESIRED: u32 = 1;
pub const DRM_MODE_CONTENT_PROTECTION_ENABLED: u32 = 2;
pub const DRM_MODE_PRESENT_TOP_FIELD: u32 = 1;
pub const DRM_MODE_PRESENT_BOTTOM_FIELD: u32 = 2;
pub const DRM_MODE_ENCODER_NONE: u32 = 0;
pub const DRM_MODE_ENCODER_DAC: u32 = 1;
pub const DRM_MODE_ENCODER_TMDS: u32 = 2;
pub const DRM_MODE_ENCODER_LVDS: u32 = 3;
pub const DRM_MODE_ENCODER_TVDAC: u32 = 4;
pub const DRM_MODE_ENCODER_VIRTUAL: u32 = 5;
pub const DRM_MODE_ENCODER_DSI: u32 = 6;
pub const DRM_MODE_ENCODER_DPMST: u32 = 7;
pub const DRM_MODE_ENCODER_DPI: u32 = 8;
pub const DRM_MODE_CONNECTOR_Unknown: u32 = 0;
pub const DRM_MODE_CONNECTOR_VGA: u32 = 1;
pub const DRM_MODE_CONNECTOR_DVII: u32 = 2;
pub const DRM_MODE_CONNECTOR_DVID: u32 = 3;
pub const DRM_MODE_CONNECTOR_DVIA: u32 = 4;
pub const DRM_MODE_CONNECTOR_Composite: u32 = 5;
pub const DRM_MODE_CONNECTOR_SVIDEO: u32 = 6;
pub const DRM_MODE_CONNECTOR_LVDS: u32 = 7;
pub const DRM_MODE_CONNECTOR_Component: u32 = 8;
pub const DRM_MODE_CONNECTOR_9PinDIN: u32 = 9;
pub const DRM_MODE_CONNECTOR_DisplayPort: u32 = 10;
pub const DRM_MODE_CONNECTOR_HDMIA: u32 = 11;
pub const DRM_MODE_CONNECTOR_HDMIB: u32 = 12;
pub const DRM_MODE_CONNECTOR_TV: u32 = 13;
pub const DRM_MODE_CONNECTOR_eDP: u32 = 14;
pub const DRM_MODE_CONNECTOR_VIRTUAL: u32 = 15;
pub const DRM_MODE_CONNECTOR_DSI: u32 = 16;
pub const DRM_MODE_CONNECTOR_DPI: u32 = 17;
pub const DRM_MODE_CONNECTOR_WRITEBACK: u32 = 18;
pub const DRM_MODE_CONNECTOR_SPI: u32 = 19;
pub const DRM_MODE_CONNECTOR_USB: u32 = 20;
pub const DRM_MODE_PROP_PENDING: u32 = 1;
pub const DRM_MODE_PROP_RANGE: u32 = 2;
pub const DRM_MODE_PROP_IMMUTABLE: u32 = 4;
pub const DRM_MODE_PROP_ENUM: u32 = 8;
pub const DRM_MODE_PROP_BLOB: u32 = 16;
pub const DRM_MODE_PROP_BITMASK: u32 = 32;
pub const DRM_MODE_PROP_LEGACY_TYPE: u32 = 58;
pub const DRM_MODE_PROP_EXTENDED_TYPE: u32 = 65472;
pub const DRM_MODE_PROP_ATOMIC: u32 = 2147483648;
pub const DRM_MODE_OBJECT_CRTC: u32 = 3435973836;
pub const DRM_MODE_OBJECT_CONNECTOR: u32 = 3233857728;
pub const DRM_MODE_OBJECT_ENCODER: u32 = 3772834016;
pub const DRM_MODE_OBJECT_MODE: u32 = 3739147998;
pub const DRM_MODE_OBJECT_PROPERTY: u32 = 2964369584;
pub const DRM_MODE_OBJECT_FB: u32 = 4227595259;
pub const DRM_MODE_OBJECT_BLOB: u32 = 3149642683;
pub const DRM_MODE_OBJECT_PLANE: u32 = 4008636142;
pub const DRM_MODE_OBJECT_ANY: u32 = 0;
pub const DRM_MODE_FB_INTERLACED: u32 = 1;
pub const DRM_MODE_FB_MODIFIERS: u32 = 2;
pub const DRM_MODE_FB_DIRTY_ANNOTATE_COPY: u32 = 1;
pub const DRM_MODE_FB_DIRTY_ANNOTATE_FILL: u32 = 2;
pub const DRM_MODE_FB_DIRTY_FLAGS: u32 = 3;
pub const DRM_MODE_FB_DIRTY_MAX_CLIPS: u32 = 256;
pub const DRM_MODE_CURSOR_BO: u32 = 1;
pub const DRM_MODE_CURSOR_MOVE: u32 = 2;
pub const DRM_MODE_CURSOR_FLAGS: u32 = 3;
pub const DRM_MODE_PAGE_FLIP_EVENT: u32 = 1;
pub const DRM_MODE_PAGE_FLIP_ASYNC: u32 = 2;
pub const DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE: u32 = 4;
pub const DRM_MODE_PAGE_FLIP_TARGET_RELATIVE: u32 = 8;
pub const DRM_MODE_PAGE_FLIP_TARGET: u32 = 12;
pub const DRM_MODE_PAGE_FLIP_FLAGS: u32 = 15;
pub const DRM_MODE_ATOMIC_TEST_ONLY: u32 = 256;
pub const DRM_MODE_ATOMIC_NONBLOCK: u32 = 512;
pub const DRM_MODE_ATOMIC_ALLOW_MODESET: u32 = 1024;
pub const DRM_MODE_ATOMIC_FLAGS: u32 = 1795;
pub const FORMAT_BLOB_CURRENT: u32 = 1;
pub const DRM_IOCTL_BASE: u8 = 100u8;
pub const DRM_COMMAND_BASE: u32 = 64;
pub const DRM_COMMAND_END: u32 = 160;
pub const DRM_EVENT_VBLANK: u32 = 1;
pub const DRM_EVENT_FLIP_COMPLETE: u32 = 2;
pub const DRM_EVENT_CRTC_SEQUENCE: u32 = 3;
pub const drm_control_DRM_ADD_COMMAND: drm_control__bindgen_ty_1 = drm_control__bindgen_ty_1::DRM_ADD_COMMAND;
pub const drm_control_DRM_RM_COMMAND: drm_control__bindgen_ty_1 = drm_control__bindgen_ty_1::DRM_RM_COMMAND;
pub const drm_control_DRM_INST_HANDLER: drm_control__bindgen_ty_1 = drm_control__bindgen_ty_1::DRM_INST_HANDLER;
pub const drm_control_DRM_UNINST_HANDLER: drm_control__bindgen_ty_1 = drm_control__bindgen_ty_1::DRM_UNINST_HANDLER;
pub const drm_buf_desc__DRM_PAGE_ALIGN: drm_buf_desc__bindgen_ty_1 = drm_buf_desc__bindgen_ty_1::_DRM_PAGE_ALIGN;
pub const drm_buf_desc__DRM_AGP_BUFFER: drm_buf_desc__bindgen_ty_1 = drm_buf_desc__bindgen_ty_1::_DRM_AGP_BUFFER;
pub const drm_buf_desc__DRM_SG_BUFFER: drm_buf_desc__bindgen_ty_1 = drm_buf_desc__bindgen_ty_1::_DRM_SG_BUFFER;
pub const drm_buf_desc__DRM_FB_BUFFER: drm_buf_desc__bindgen_ty_1 = drm_buf_desc__bindgen_ty_1::_DRM_FB_BUFFER;
pub const drm_buf_desc__DRM_PCI_BUFFER_RO: drm_buf_desc__bindgen_ty_1 = drm_buf_desc__bindgen_ty_1::_DRM_PCI_BUFFER_RO;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_control__bindgen_ty_1 {
DRM_ADD_COMMAND = 0,
DRM_RM_COMMAND = 1,
DRM_INST_HANDLER = 2,
DRM_UNINST_HANDLER = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_map_type {
_DRM_FRAME_BUFFER = 0,
_DRM_REGISTERS = 1,
_DRM_SHM = 2,
_DRM_AGP = 3,
_DRM_SCATTER_GATHER = 4,
_DRM_CONSISTENT = 5,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_map_flags {
_DRM_RESTRICTED = 1,
_DRM_READ_ONLY = 2,
_DRM_LOCKED = 4,
_DRM_KERNEL = 8,
_DRM_WRITE_COMBINING = 16,
_DRM_CONTAINS_LOCK = 32,
_DRM_REMOVABLE = 64,
_DRM_DRIVER = 128,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_stat_type {
_DRM_STAT_LOCK = 0,
_DRM_STAT_OPENS = 1,
_DRM_STAT_CLOSES = 2,
_DRM_STAT_IOCTLS = 3,
_DRM_STAT_LOCKS = 4,
_DRM_STAT_UNLOCKS = 5,
_DRM_STAT_VALUE = 6,
_DRM_STAT_BYTE = 7,
_DRM_STAT_COUNT = 8,
_DRM_STAT_IRQ = 9,
_DRM_STAT_PRIMARY = 10,
_DRM_STAT_SECONDARY = 11,
_DRM_STAT_DMA = 12,
_DRM_STAT_SPECIAL = 13,
_DRM_STAT_MISSED = 14,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_lock_flags {
_DRM_LOCK_READY = 1,
_DRM_LOCK_QUIESCENT = 2,
_DRM_LOCK_FLUSH = 4,
_DRM_LOCK_FLUSH_ALL = 8,
_DRM_HALT_ALL_QUEUES = 16,
_DRM_HALT_CUR_QUEUES = 32,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_dma_flags {
_DRM_DMA_BLOCK = 1,
_DRM_DMA_WHILE_LOCKED = 2,
_DRM_DMA_PRIORITY = 4,
_DRM_DMA_WAIT = 16,
_DRM_DMA_SMALLER_OK = 32,
_DRM_DMA_LARGER_OK = 64,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_buf_desc__bindgen_ty_1 {
_DRM_PAGE_ALIGN = 1,
_DRM_AGP_BUFFER = 2,
_DRM_SG_BUFFER = 4,
_DRM_FB_BUFFER = 8,
_DRM_PCI_BUFFER_RO = 16,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_ctx_flags {
_DRM_CONTEXT_PRESERVED = 1,
_DRM_CONTEXT_2DONLY = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_drawable_info_type_t {
DRM_DRAWABLE_CLIPRECTS = 0,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_vblank_seq_type {
_DRM_VBLANK_ABSOLUTE = 0,
_DRM_VBLANK_RELATIVE = 1,
_DRM_VBLANK_HIGH_CRTC_MASK = 62,
_DRM_VBLANK_EVENT = 67108864,
_DRM_VBLANK_FLIP = 134217728,
_DRM_VBLANK_NEXTONMISS = 268435456,
_DRM_VBLANK_SECONDARY = 536870912,
_DRM_VBLANK_SIGNAL = 1073741824,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_mode_subconnector {
DRM_MODE_SUBCONNECTOR_Automatic = 0,
DRM_MODE_SUBCONNECTOR_VGA = 1,
DRM_MODE_SUBCONNECTOR_DVID = 3,
DRM_MODE_SUBCONNECTOR_DVIA = 4,
DRM_MODE_SUBCONNECTOR_Composite = 5,
DRM_MODE_SUBCONNECTOR_SVIDEO = 6,
DRM_MODE_SUBCONNECTOR_Component = 8,
DRM_MODE_SUBCONNECTOR_SCART = 9,
DRM_MODE_SUBCONNECTOR_DisplayPort = 10,
DRM_MODE_SUBCONNECTOR_HDMIA = 11,
DRM_MODE_SUBCONNECTOR_Native = 15,
DRM_MODE_SUBCONNECTOR_Wireless = 18,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_wait_vblank {
pub request: drm_wait_vblank_request,
pub reply: drm_wait_vblank_reply,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hdr_output_metadata__bindgen_ty_1 {
pub hdmi_metadata_type1: hdr_metadata_infoframe,
}
impl drm_mode_subconnector {
pub const DRM_MODE_SUBCONNECTOR_Unknown: drm_mode_subconnector = drm_mode_subconnector::DRM_MODE_SUBCONNECTOR_Automatic;
}
pub use self::drm_ctx_flags as drm_ctx_flags_t;
pub use self::drm_dma_flags as drm_dma_flags_t;
pub use self::drm_lock_flags as drm_lock_flags_t;
pub use self::drm_map_flags as drm_map_flags_t;
pub use self::drm_map_type as drm_map_type_t;
pub use self::drm_stat_type as drm_stat_type_t;
pub use self::drm_vblank_seq_type as drm_vblank_seq_type_t;
